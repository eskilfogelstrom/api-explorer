!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){t.exports=n(1)},function(t,e,n){"use strict";n.r(e);n(2);function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o=document.getElementById("url"),a="",c=document.getElementById("submit"),u=document.getElementById("error"),i=document.getElementById("result"),l=document.getElementById("raw"),s=document.getElementById("code"),d=function t(e,n){var o=function(t){return null===t?"null":Array.isArray(t)?"array":r(t)}(e),c=document.createElement("div");if(c.className="result-list__list",n&&(c.innerHTML='<div class="result-list__title">'.concat(n," <small>(").concat(o,")</small></div>"),c.dataset.key=n),"array"===o)return e.reduce((function(e,n,r){var o=t(n,"[".concat(r,"]"));return e.appendChild(o),e}),c);if("object"===o)return Object.keys(e).reduce((function(n,r){var o=t(e[r],r);return n.appendChild(o),n}),c);var u=document.createElement("div");return u.className="result-list__leaf",u.dataset.key=n,u.innerHTML='\n        <div class="result-list__title">'.concat(n," <small>(").concat(r(e),")</small></div>\n        ").concat(e,"\n        "),u.onclick=function(){return function(t){var e=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r="["===e.dataset.key[0]?e.dataset.key:"."+e.dataset.key,o=n.concat([r]);return e.parentNode.dataset.key?t(e.parentNode,o):o.reverse().join("")}(t),n="["===t.dataset.key[0]?t.parentNode.dataset.key+t.dataset.key.slice(1,t.dataset.key.length-1):t.dataset.key,r="fetch('".concat(a,"')\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        var ").concat(n," = data").concat(e,"\n        // console.log(").concat(n,");\n    })");s.innerHTML=r,hljs.highlightBlock(s)}(u)},u};c.onclick=function(){a=o.value,i.innerHTML="",l.innerHTML="",s.innerHTML="",u.innerHTML="",u.classList.remove("visible"),fetch(a).then((function(t){return t.ok?t.json():t.text().then((function(e){var n=new Error(t.statusText);throw n.status=t.status,n.body=e,n}))})).then((function(t){i.appendChild(d(t)),l.innerHTML=JSON.stringify(t,null,"  "),hljs.highlightBlock(l)})).catch((function(t){t.status?(u.innerHTML="".concat(t.status," - ").concat(t.statusText),l.innerText=t.body):u.innerHTML=t.message,u.classList.add("visible")}))}},function(t,e,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,